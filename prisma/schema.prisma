// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UploadFileUser {
  id     Int     @id @default(autoincrement())
  url    String?
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  phoneNumber    String?
  lastName       String?
  firstName      String?
  birthDate      DateTime?         @db.Date
  password       String
  avatar         String?
  style          Style?           @relation(fields: [styleId], references: [id])
  lastLesson     Lesson?          @relation(fields: [lessonId], references: [id])
  rank           Rank?            @relation(fields: [rankId], references: [id])
  badge          Badge[]
  bio            String?
  uploadFileUser UploadFileUser[]
  school         School?          @relation(fields: [schoolId], references: [id])
  schoolId       Int?
  subscription   Subscription[]
  styleId        Int?
  lessonId       Int?
  rankId         Int?
  dateCreation   DateTime         @db.Date
  Instrument     Instrument?      @relation(fields: [instrumentId], references: [id])
  instrumentId   Int?
}

model Teacher {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  lastName    String?
  firstName   String?
  description String?
  school      String?
  dateOfBirth DateTime
  titleWin    String?
  diploma     String?
  photo       String[]
  career      String?
  course      Course[]
  instrument  Instrument[]
  style       Style[]
}

model School {
  id   Int     @id @default(autoincrement())
  nom  String?
  user User[]
  rank Rank[]
}

model Style {
  id          Int           @id @default(autoincrement())
  name        String?
  description String?
  rank        Rank[]
  course      Course[]
  competition Competition[]
  user        User[]
  teacher     Teacher?      @relation(fields: [teacherId], references: [id])
  teacherId   Int?
}

model Rank {
  id      Int    @id @default(autoincrement())
  place   Int
  style   Style  @relation(fields: [styleId], references: [id])
  ecole   School @relation(fields: [ecoleId], references: [id])
  point   Int
  styleId Int
  ecoleId Int
  user    User[]
}

model Level {
  id          Int           @id @default(autoincrement())
  lesson      Lesson        @relation(fields: [lessonId], references: [id])
  nom         String?
  lessonId    Int
  cours       Course[]
  badge       Badge[]
  competition Competition[]
}

model LessonFile {
  id       Int      @id @default(autoincrement())
  file     String[]
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  lessonId Int
}

model Video {
  id          Int     @id @default(autoincrement())
  nom         String?
  description String?
  lesson      Lesson  @relation(fields: [lessonId], references: [id])
  lessonId    Int
}

model Lesson {
  id          Int          @id @default(autoincrement())
  nom         String?
  description String?
  niveau      Level[]
  lessonFile  LessonFile[]
  video       Video[]
  course      Course?      @relation(fields: [courseId], references: [id])
  courseId    Int?
  badge       Badge[]
  user        User[]
}

model Course {
  id           Int        @id @default(autoincrement())
  name         String?
  description  String?
  level        Level      @relation(fields: [levelId], references: [id])
  style        Style      @relation(fields: [styleId], references: [id])
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  lesson       Lesson[]
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  levelId      Int
  styleId      Int
  teacherId    Int
  instrumentId Int
  badge        Badge[]
}

model Instrument {
  id          Int           @id @default(autoincrement())
  name        String?
  description String?
  course      Course[]
  competition Competition[]
  user        User[]
  teacher     Teacher?      @relation(fields: [teacherId], references: [id])
  teacherId   Int?
}

model Badge {
  id        Int         @id @default(autoincrement())
  name      String?
  level     Level       @relation(fields: [levelId], references: [id])
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  course    Course      @relation(fields: [courseId], references: [id])
  point     Int
  certifie  Boolean
  levelId   Int
  lessonId  Int
  courseId  Int
  iconBadge IconBadge[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    Int?
}

model IconBadge {
  id      Int    @id @default(autoincrement())
  url     String
  badge   Badge  @relation(fields: [badgeId], references: [id])
  badgeId Int
}

model Subscription {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  expiration         DateTime
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  userId             Int
  subscriptionPlanId Int
}

model SubscriptionPlan {
  id           Int            @id @default(autoincrement())
  name         String?
  plan         String
  price        Float
  duration     DateTime
  subscription Subscription[]
}

model Competition {
  id           Int        @id @default(autoincrement())
  name         String?
  description  String?
  level        Level      @relation(fields: [levelId], references: [id])
  style        Style      @relation(fields: [styleId], references: [id])
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  date         DateTime
  localisation String
  priceEnter   Int
  priceWin     Int
  levelId      Int
  styleId      Int
  instrumentId Int
}
